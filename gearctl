#!/usr/bin/env perl

=head1 NAME

gearctl - Gearman daemon controller, with graceful shutdown

=head1 SYNOPSIS

 gearctl [options]

 Options:

      --host <arg>  the server's host (default localhost)
      --port <arg>  the server's port (default 4730)
      --workers     a list all workers
      --status      a list of functions
      --shutdown    shutdown the server without draining the queue
      --graceful    drain queue before shutting down the server
      --version     reports the server version
  -h, --help        brief help message
  -m, --man         full documentation

=head1 OPTIONS

=over

=item --host <arg>

Default: localhost

Connect to the server on this host.

=item --port <arg>

Default: 4730

Connect to the server on this port.

=item --workers

This sends back a list of all workers, their file descriptors, their IPs, their
IDs, and a list of registered functions they can perform. The list is
terminated with a line containing a single '.' (period). The format is:

 FD IP-ADDRESS CLIENT-ID : FUNCTION ...

=item --status

This sends back a list of all registered functions.  Next to each function is
the number of jobs in the queue, the number of running jobs, and the number of
capable workers. The columns are tab separated, and the list is terminated with
a line containing a single '.' (period). The format is:

 FUNCTION\tTOTAL\tRUNNING\tAVAILABLE_WORKERS

=item --shutdown

Shutdown the server immediately.  Any jobs in non-durable queues will be lost.

=item --graceful

Shutdown the server after preventing further jobs from being added to the
queue, and allowing remaining jobs to complete.  This can be useful if you want
to fail jobs over to another server, but don't want to lose jobs that are
already queued.

=item --version

Report the server's version.

=item -h, --help

Print a brief help message, then exit.

=item -m, --man

Print the manual page, and then exit.

=back

=head1 DESCRIPTION

C<gearctl> is an alternative to C<gearadmin> - one which provides the option to
gracefully shutdown a gearman server.

=cut

use strict;
use warnings;

use IO::Socket::INET;
use Getopt::Long;
use Pod::Usage;

my %Args = (
    host => 'localhost',
    port => 4730,
);

GetOptions(
    \%Args,
    'host=s',
    'port=i',
    'workers',
    'status',
    'maxqueue',
    'shutdown',
    'graceful',
    'version',
    'help|h',
    'man|m',
);

pod2usage(-verbose => 0), exit if $Args{help};
pod2usage(-verbose => 2), exit if $Args{man};

die "Please specify one command only\n"
    if keys %Args > 3;

my %Dispatch = (
    workers  => sub { send_dot_cmd('workers') },
    status   => sub { send_dot_cmd('status') },
    shutdown => sub {
        send_ok_cmd('shutdown');
        wait_until_dead();
    },
    graceful => sub {
        send_ok_cmd('shutdown graceful');
        wait_until_dead();
    },
    version  => sub {
        my ($version) = send_cmd(
            'version',
            qr{OK \d\.\d\.\d\x0a}
        );
        $version =~ s/^OK //;
        print "$version\n";
    },
);

for my $cmd (keys %Dispatch) {
    next unless $Args{$cmd};
    $Dispatch{$cmd}->();
    last;
}

sub get_socket {
    IO::Socket::INET->new(
        PeerAddr => $Args{host},
        PeerPort => $Args{port},
        Type     => SOCK_STREAM,
        Timeout  => 1,
        Proto    => 'tcp',
    );
}

sub send_ok_cmd {
    my $cmd      = shift;
    my ($status) = send_cmd($cmd, qr{OK\n\r});

    die "'$cmd' returned non-OK status: $status\n"
        unless defined $status && $status eq 'OK';
}

sub send_dot_cmd {
    my $cmd = shift;
    print join "\n", send_cmd($cmd, qr{\x0a\.\x0a});
    print "\n";
}

sub send_cmd {
    my $cmd  = shift;
    my $term = shift;
    my $sock = get_socket();

    die "Could not connect to Gearman on $Args{host}:$Args{port}\n"
        unless $sock;

    $sock->send("$cmd\n");

    my ($buf, $data);
    while (1) {
        last unless defined $sock->recv($buf, 1024);
        last unless length $buf;
        $data .= $buf;
        last if $data =~ /$term$/s;
    }

    $sock->close;

    map {s/\s+$//; $_} split /^/, $data;
}

sub wait_until_dead {
    my $timeout = 300;
    my $end     = time + $timeout;

    while (get_socket()) {
        die "gearmand failed to close after $timeout seconds\n"
            if time > $end;
        sleep 1;
    }
}
